Rules never reduced

   24 f_expr: error


State 1 conflicts: 9 reduce/reduce
State 49 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: s_expr EOL
    2        | s_expr EOFT
    3        | EOL
    4        | EOFT

    5 s_expr: f_expr
    6       | number
    7       | SYMBOL
    8       | LPAREN let_section s_expr RPAREN
    9       | LPAREN COND s_expr s_expr s_expr RPAREN
   10       | QUIT
   11       | error

   12 let_section: LPAREN LET let_list RPAREN

   13 let_list: let_elem
   14         | let_elem let_list

   15 let_elem: LPAREN SYMBOL s_expr RPAREN
   16         | LPAREN TYPE SYMBOL s_expr RPAREN
   17         | LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   18         | LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

   19 arg_list: SYMBOL
   20         | SYMBOL arg_list
   21         | /* empty */

   22 f_expr: LPAREN FUNC s_expr_section RPAREN
   23       | LPAREN SYMBOL s_expr_section RPAREN
   24       | error

   25 s_expr_section: s_expr_list
   26               | /* empty */

   27 s_expr_list: s_expr
   28            | s_expr s_expr_list

   29 number: INT
   30       | DOUBLE


Terminals, with rules where they appear

$end (0) 0
error (256) 11 24
FUNC (258) 22
INT (259) 29
DOUBLE (260) 30
SYMBOL (261) 7 15 16 17 18 19 20 23
TYPE (262) 16 18
QUIT (263) 10
LET (264) 12
LAMBDA (265) 17 18
COND (266) 9
LPAREN (267) 8 9 12 15 16 17 18 22 23
RPAREN (268) 8 9 12 15 16 17 18 22 23
EOL (269) 1 3
EOFT (270) 2 4


Nonterminals, with rules where they appear

$accept (16)
    on left: 0
program (17)
    on left: 1 2 3 4, on right: 0
s_expr (18)
    on left: 5 6 7 8 9 10 11, on right: 1 2 8 9 15 16 17 18 27 28
let_section (19)
    on left: 12, on right: 8
let_list (20)
    on left: 13 14, on right: 12 14
let_elem (21)
    on left: 15 16 17 18, on right: 13 14
arg_list (22)
    on left: 19 20 21, on right: 17 18 20
f_expr (23)
    on left: 22 23 24, on right: 5
s_expr_section (24)
    on left: 25 26, on right: 22 23
s_expr_list (25)
    on left: 27 28, on right: 25 28
number (26)
    on left: 29 30, on right: 6


state 0

    0 $accept: . program $end

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LPAREN  shift, and go to state 6
    EOL     shift, and go to state 7
    EOFT    shift, and go to state 8

    program  go to state 9
    s_expr   go to state 10
    f_expr   go to state 11
    number   go to state 12


state 1

   11 s_expr: error .
   24 f_expr: error .

    error     reduce using rule 11 (s_expr)
    error     [reduce using rule 24 (f_expr)]
    INT       reduce using rule 11 (s_expr)
    INT       [reduce using rule 24 (f_expr)]
    DOUBLE    reduce using rule 11 (s_expr)
    DOUBLE    [reduce using rule 24 (f_expr)]
    SYMBOL    reduce using rule 11 (s_expr)
    SYMBOL    [reduce using rule 24 (f_expr)]
    QUIT      reduce using rule 11 (s_expr)
    QUIT      [reduce using rule 24 (f_expr)]
    LPAREN    reduce using rule 11 (s_expr)
    LPAREN    [reduce using rule 24 (f_expr)]
    RPAREN    reduce using rule 11 (s_expr)
    RPAREN    [reduce using rule 24 (f_expr)]
    EOL       reduce using rule 11 (s_expr)
    EOL       [reduce using rule 24 (f_expr)]
    EOFT      reduce using rule 11 (s_expr)
    EOFT      [reduce using rule 24 (f_expr)]
    $default  reduce using rule 11 (s_expr)


state 2

   29 number: INT .

    $default  reduce using rule 29 (number)


state 3

   30 number: DOUBLE .

    $default  reduce using rule 30 (number)


state 4

    7 s_expr: SYMBOL .

    $default  reduce using rule 7 (s_expr)


state 5

   10 s_expr: QUIT .

    $default  reduce using rule 10 (s_expr)


state 6

    8 s_expr: LPAREN . let_section s_expr RPAREN
    9       | LPAREN . COND s_expr s_expr s_expr RPAREN
   22 f_expr: LPAREN . FUNC s_expr_section RPAREN
   23       | LPAREN . SYMBOL s_expr_section RPAREN

    FUNC    shift, and go to state 13
    SYMBOL  shift, and go to state 14
    COND    shift, and go to state 15
    LPAREN  shift, and go to state 16

    let_section  go to state 17


state 7

    3 program: EOL .

    $default  reduce using rule 3 (program)


state 8

    4 program: EOFT .

    $default  reduce using rule 4 (program)


state 9

    0 $accept: program . $end

    $end  shift, and go to state 18


state 10

    1 program: s_expr . EOL
    2        | s_expr . EOFT

    EOL   shift, and go to state 19
    EOFT  shift, and go to state 20


state 11

    5 s_expr: f_expr .

    $default  reduce using rule 5 (s_expr)


state 12

    6 s_expr: number .

    $default  reduce using rule 6 (s_expr)


state 13

   22 f_expr: LPAREN FUNC . s_expr_section RPAREN

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LPAREN  shift, and go to state 6

    RPAREN  reduce using rule 26 (s_expr_section)

    s_expr          go to state 21
    f_expr          go to state 11
    s_expr_section  go to state 22
    s_expr_list     go to state 23
    number          go to state 12


state 14

   23 f_expr: LPAREN SYMBOL . s_expr_section RPAREN

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LPAREN  shift, and go to state 6

    RPAREN  reduce using rule 26 (s_expr_section)

    s_expr          go to state 21
    f_expr          go to state 11
    s_expr_section  go to state 24
    s_expr_list     go to state 23
    number          go to state 12


state 15

    9 s_expr: LPAREN COND . s_expr s_expr s_expr RPAREN

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LPAREN  shift, and go to state 6

    s_expr  go to state 25
    f_expr  go to state 11
    number  go to state 12


state 16

   12 let_section: LPAREN . LET let_list RPAREN

    LET  shift, and go to state 26


state 17

    8 s_expr: LPAREN let_section . s_expr RPAREN

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LPAREN  shift, and go to state 6

    s_expr  go to state 27
    f_expr  go to state 11
    number  go to state 12


state 18

    0 $accept: program $end .

    $default  accept


state 19

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


state 20

    2 program: s_expr EOFT .

    $default  reduce using rule 2 (program)


state 21

   27 s_expr_list: s_expr .
   28            | s_expr . s_expr_list

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LPAREN  shift, and go to state 6

    RPAREN  reduce using rule 27 (s_expr_list)

    s_expr       go to state 21
    f_expr       go to state 11
    s_expr_list  go to state 28
    number       go to state 12


state 22

   22 f_expr: LPAREN FUNC s_expr_section . RPAREN

    RPAREN  shift, and go to state 29


state 23

   25 s_expr_section: s_expr_list .

    $default  reduce using rule 25 (s_expr_section)


state 24

   23 f_expr: LPAREN SYMBOL s_expr_section . RPAREN

    RPAREN  shift, and go to state 30


state 25

    9 s_expr: LPAREN COND s_expr . s_expr s_expr RPAREN

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LPAREN  shift, and go to state 6

    s_expr  go to state 31
    f_expr  go to state 11
    number  go to state 12


state 26

   12 let_section: LPAREN LET . let_list RPAREN

    LPAREN  shift, and go to state 32

    let_list  go to state 33
    let_elem  go to state 34


state 27

    8 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 35


state 28

   28 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 28 (s_expr_list)


state 29

   22 f_expr: LPAREN FUNC s_expr_section RPAREN .

    $default  reduce using rule 22 (f_expr)


state 30

   23 f_expr: LPAREN SYMBOL s_expr_section RPAREN .

    $default  reduce using rule 23 (f_expr)


state 31

    9 s_expr: LPAREN COND s_expr s_expr . s_expr RPAREN

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LPAREN  shift, and go to state 6

    s_expr  go to state 36
    f_expr  go to state 11
    number  go to state 12


state 32

   15 let_elem: LPAREN . SYMBOL s_expr RPAREN
   16         | LPAREN . TYPE SYMBOL s_expr RPAREN
   17         | LPAREN . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
   18         | LPAREN . TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 37
    TYPE    shift, and go to state 38


state 33

   12 let_section: LPAREN LET let_list . RPAREN

    RPAREN  shift, and go to state 39


state 34

   13 let_list: let_elem .
   14         | let_elem . let_list

    LPAREN  shift, and go to state 32

    $default  reduce using rule 13 (let_list)

    let_list  go to state 40
    let_elem  go to state 34


state 35

    8 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 8 (s_expr)


state 36

    9 s_expr: LPAREN COND s_expr s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 41


state 37

   15 let_elem: LPAREN SYMBOL . s_expr RPAREN
   17         | LPAREN SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LAMBDA  shift, and go to state 42
    LPAREN  shift, and go to state 6

    s_expr  go to state 43
    f_expr  go to state 11
    number  go to state 12


state 38

   16 let_elem: LPAREN TYPE . SYMBOL s_expr RPAREN
   18         | LPAREN TYPE . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 44


state 39

   12 let_section: LPAREN LET let_list RPAREN .

    $default  reduce using rule 12 (let_section)


state 40

   14 let_list: let_elem let_list .

    $default  reduce using rule 14 (let_list)


state 41

    9 s_expr: LPAREN COND s_expr s_expr s_expr RPAREN .

    $default  reduce using rule 9 (s_expr)


state 42

   17 let_elem: LPAREN SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 45


state 43

   15 let_elem: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 46


state 44

   16 let_elem: LPAREN TYPE SYMBOL . s_expr RPAREN
   18         | LPAREN TYPE SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LAMBDA  shift, and go to state 47
    LPAREN  shift, and go to state 6

    s_expr  go to state 48
    f_expr  go to state 11
    number  go to state 12


state 45

   17 let_elem: LPAREN SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 49

    $default  reduce using rule 21 (arg_list)

    arg_list  go to state 50


state 46

   15 let_elem: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 15 (let_elem)


state 47

   18 let_elem: LPAREN TYPE SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 51


state 48

   16 let_elem: LPAREN TYPE SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 52


state 49

   19 arg_list: SYMBOL .
   20         | SYMBOL . arg_list

    SYMBOL  shift, and go to state 49

    RPAREN    reduce using rule 19 (arg_list)
    RPAREN    [reduce using rule 21 (arg_list)]
    $default  reduce using rule 19 (arg_list)

    arg_list  go to state 53


state 50

   17 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 54


state 51

   18 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 49

    $default  reduce using rule 21 (arg_list)

    arg_list  go to state 55


state 52

   16 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN .

    $default  reduce using rule 16 (let_elem)


state 53

   20 arg_list: SYMBOL arg_list .

    $default  reduce using rule 20 (arg_list)


state 54

   17 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LPAREN  shift, and go to state 6

    s_expr  go to state 56
    f_expr  go to state 11
    number  go to state 12


state 55

   18 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 57


state 56

   17 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 58


state 57

   18 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error   shift, and go to state 1
    INT     shift, and go to state 2
    DOUBLE  shift, and go to state 3
    SYMBOL  shift, and go to state 4
    QUIT    shift, and go to state 5
    LPAREN  shift, and go to state 6

    s_expr  go to state 59
    f_expr  go to state 11
    number  go to state 12


state 58

   17 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 17 (let_elem)


state 59

   18 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 60


state 60

   18 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 18 (let_elem)
